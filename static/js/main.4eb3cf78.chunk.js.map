{"version":3,"sources":["assets/js/popOutText.js","components/textEditor.jsx","App.js","serviceWorker.js","index.js"],"names":["code1","returnCode","userInput","code","found","match","length","total","i","test","input","split","prompt","_SERVER","isArray","obj","Array","String","textEditor","state","output","running","handleChange","updateValue","handleRun","_this","setState","axios","post","then","res","get","data","props","setData","handleKill","console","log","_this2","this","react_default","a","createElement","Fragment","className","lib_default","fontSize","value","mode","theme","onChange","name","editorProps","$blockScrolling","Grid","columns","Column","width","Button","id","loading","Content","hidden","Icon","onClick","type","JSON","stringify","Component","App","handleGetData","arr","padded","components_textEditor","Container","text","Header","as","react_plotly_default","x","layout","height","title","xaxis","yaxis","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4eb3cf78.chunk.js","sourcesContent":["export function popOut(){\n    var popup = document.getElementsByClassName(\"popuptext\");\n    if(popup[0].style.display === \"block\"){\n        popup[0].style.display = \"none\";\n    }\n    else{\n        popup[0].style.display = \"block\";\n    }\n}\n\nvar code1 = \"\";\nexport function updateValue(code){\n    code1 = code;\n    // console.log(code1);\n}\n\nexport function returnCode(){\n    return code1;\n}\n\n//USED TO PARSE USER INPUT\nexport function userInput(code) {\n    var found = (code.match(/raw_input()/g) || []).length\n    var total = ''\n    var i = 1\n    if (found === 0) {\n      return total\n    }\n    else {\n      var test = (code.match(/raw_input()/) || []).input.split(/['']/)\n      while (found !== 0) {\n        var userInput = prompt(test[i])\n        total += userInput + '\\n'\n        i = i + 2\n        found--\n      }\n    }\n    return total\n  }\n","import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport axios from \"axios\";\n\nimport 'brace/mode/python';\nimport 'brace/theme/xcode';\n\n//IMPORT SEMANTIC UI\nimport {Button, Icon, Grid} from \"semantic-ui-react\";\n\n//IMPORT JS\nimport {updateValue, returnCode, userInput} from \"../assets/js/popOutText\";\n\n// const _SERVER = \"http://0.0.0.0:5000\";\nconst _SERVER = \"https://rc-cola-backend.herokuapp.com\"\n\n// https://stackoverflow.com/questions/4456336/finding-variable-type-in-javascript\nvar isArray = function (obj) {\n  switch (typeof(obj)) {\n    case 'object':\n      if (obj instanceof Array)\n        return true;\n      if (obj instanceof String)\n        return false;\n      return false;\n    default:\n      return false;\n  }\n};\n\nclass textEditor extends Component {\n  state = {\n    output: \"\",\n    running: false\n  }\n\n  handleChange = (code) =>{\n    updateValue(code);\n  }\n  //will handle submission of code written\n  handleRun = () => {\n    this.setState({running: true})\n    const code = {\n        code: returnCode(),\n        input: userInput(returnCode())\n\n    }\n    // console.log(code.input);\n    axios.post(_SERVER + \"/run\", {code})\n    .then(res =>{\n        // console.log(res.data)\n        // UPDATES WHAT WILL BE DISPLAY ON CONSOLE\n        axios.get(_SERVER + \"/output\")\n        .then(res => {\n            const output = res.data;\n            // console.log(res.data)\n            if (isArray(res.data)) {\n              this.props.setData(res.data)\n            }\n            this.setState({output: output, running: false});\n        })\n      })\n  }\n\n  handleKill = () =>{\n      axios.get(_SERVER + \"/kill\")\n      .then(res => {\n          console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className = \"leftSide\">\n          <AceEditor\n            className = \"editor\"\n            fontSize = {18}\n            value = {returnCode()}\n            mode=\"python\"\n            theme=\"xcode\"\n            onChange={this.handleChange}\n            name=\"UNIQUE_ID_OF_DIV\"\n            editorProps={{$blockScrolling: true}}\n          />\n          <div className = \"buttonRun\">\n            <Grid columns= \"equal\">\n              <Grid.Column width = {8}>\n                {!this.state.running ?\n                  <Button id = \"playButton\" className = \"runPlay\" onClick = {() => this.handleRun()}>\n                    <Button.Content hidden>\n                        <Icon name='play' />\n                    </Button.Content>\n                  </Button>\n                  :\n                  <Button id=\"playButton\" className=\"runPlay\" loading>\n                    <Button.Content hidden>\n                      <Icon name='play'/>\n                    </Button.Content>\n                  </Button>\n                }\n              </Grid.Column>\n              <Grid.Column width = {8}>\n                  <Button id = \"playButton\" className = \"runPause\" onClick = {() => this.handleKill()}>\n                      <Button.Content hidden>\n                        <Icon name='pause' />\n                      </Button.Content>\n                  </Button>\n              </Grid.Column>\n            </Grid>\n          </div>\n          <div className=\"console\" type=\"text\" name=\"comment\">\n            {isArray(this.state.output) ?\n              <pre>{JSON.stringify(this.state.output)}</pre> :\n              <pre>{this.state.output}</pre>\n            }\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default textEditor;\n","import React, { Component } from 'react';\n\n//IMPORT COMPONENTS\nimport TextEditor from \"./components/textEditor\";\n\n//IMPORT SEMANTIC UI\nimport {Grid, Container, Header} from \"semantic-ui-react\";\n\n//IMPROT Plotly\nimport Plot from 'react-plotly.js';\n\n//IMPORT CSS\nimport \"./assets/css/textEditor.css\";\n\nclass App extends Component {\n  state = {\n    data: []\n  }\n\n  handleGetData = (arr) => {\n    this.setState({data: arr})\n  }\n\n  render() {\n    return (\n     <React.Fragment>\n       <Grid columns= \"equal\" padded>\n        <Grid.Column width = {8}>\n          <TextEditor setData={this.handleGetData}/>\n        </Grid.Column>\n        <Grid.Column width = {8}>\n          {/* <CharacterText/> add a block of text here describing the\n            RC cola problem isntead.*/}\n            <Container text>\n              <Header as='h2'>RC Cola Contest!</Header>\n              <p>\n                RC Cola is having a promotional contest in order to make a\n                comeback in the soda industry! They label numbers on the bottom\n                of each soda cap from <b>1-6</b>, so that you ALWAYS have an equal\n                chance of getting a bottle with any number on it. <b>If you happen\n                to get a bottle with the number '1' on it, you win the prize</b>!\n              </p>\n              <p>\n                This is a prize you NEED: Guaranteed admission to your dream\n                college, all the skins in Fortnite, your chance to meet any\n                celebrity.. you name it! You've completely lost your mind and\n                <b> you won't stop buying sodas until you've bought a soda with a\n                '1' on the cap</b>. You go up to an infinite RC Cola machine and do\n                just that: you buy sodas until you open one with your prize.\n              </p>\n              <p>\n                Now suppose 10,000 people line up behind me because they also\n                want this prize. Every one is awiting in this line so that they\n                can do the exact same thing: Buy a soda, check the cap to see if\n                it's a 1--no? Buy a soda, check the cap to see if it's a 1-- no?\n                Buy a soda, check the cap to see if it's a 1--yes! Let's say\n                everyone got so excited, they shouted out the number of bottles\n                they had to buy to get their win, before leaving to go home.\n              </p>\n              <p>\n                Researcher Helen Zhao Chen is curious to see which number was\n                most likely to be shouted. She stands next to the RC Cola\n                machine with a clipboard and <b>makes a list</b> of the numbers that\n                people are shouting. Every time somebody shouts a number, she\n                <b> appends it to her list</b>.\n              </p>\n              <p>\n                Define a function called cola( ) which returns this list. You\n                will see a histogram (how many times each number was shouted\n                out) below.\n              </p>\n              <center>\n                <Plot\n                  data={[\n                    {\n                      x: this.state.data,\n                      type: 'histogram',\n                    }\n                  ]}\n                  layout={{\n                    width: 600,\n                    height: 400,\n                    title: \"How many Tries until Prize?\",\n                    xaxis: {title: \"Number of Tries\"},\n                    yaxis: {title: \"Number of People\"}\n                  }}\n                />\n              </center>\n            </Container>\n        </Grid.Column>\n      </Grid>\n     </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}