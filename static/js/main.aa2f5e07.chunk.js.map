{"version":3,"sources":["assets/js/popOutText.js","components/textEditor.jsx","components/problem.jsx","components/login.jsx","App.js","serviceWorker.js","index.js"],"names":["code1","updateValue","code","returnCode","userInput","found","match","length","total","i","test","input","split","prompt","_SERVER","_callee","group_id","regenerator_default","a","wrap","_context","prev","next","axios","post","Promise","resolve","reject","setTimeout","stop","isArray","obj","Array","String","textEditor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","output","running","ticket","handleChange","handleRun","setState","group","then","res","data","get","params","setData","handleKill","console","log","_x","_uploadCode","apply","arguments","uploadCode","init","_this2","react_default","createElement","Fragment","className","lib_default","fontSize","value","mode","theme","onChange","name","editorProps","$blockScrolling","Grid","columns","Column","width","Button","id","loading","Content","hidden","Icon","onClick","type","JSON","stringify","Component","Problem","Container","text","Header","as","react_plotly_default","x","layout","height","title","xaxis","yaxis","student_1","student_2","handleSecond","bind","assertThisInitialized","handleFirst","handleClick","e","target","setStudents","padded","centered","Row","Message","Form","Field","Label","Input","placeholder","primary","App","handleGetData","arr","handleLogin","st_1","st_2","components_textEditor","problem","login","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aa2f5e07.chunk.js","sourcesContent":["import axios from \"axios\";\nexport function popOut(){\n    var popup = document.getElementsByClassName(\"popuptext\");\n    if(popup[0].style.display === \"block\"){\n        popup[0].style.display = \"none\";\n    }\n    else{\n        popup[0].style.display = \"block\";\n    }\n}\n\nvar code1 = \"\";\nexport function updateValue(code){\n    code1 = code;\n    // console.log(code1);\n}\n\nexport function returnCode(){\n    return code1;\n}\n\n//USED TO PARSE USER INPUT\nexport function userInput(code) {\n    var found = (code.match(/raw_input()/g) || []).length\n    var total = ''\n    var i = 1\n    if (found === 0) {\n      return total\n    }\n    else {\n      var test = (code.match(/raw_input()/) || []).input.split(/['']/)\n      while (found !== 0) {\n        var userInput = prompt(test[i])\n        total += userInput + '\\n'\n        i = i + 2\n        found--\n      }\n    }\n    return total\n  }\n\n// const _SERVER = \"http://0.0.0.0:5000\";\nconst _SERVER = \"https://rc-cola-backend.herokuapp.com\"\nexport async function uploadCode(group_id) {\n  while (true) {\n    axios.post(_SERVER + \"/upload\", {code1, group_id})\n    await new Promise((resolve, reject) => setTimeout(resolve, 10000));\n\n  }\n}\n","import React, { Component } from 'react';\nimport AceEditor from 'react-ace';\nimport axios from \"axios\";\n\nimport 'brace/mode/python';\nimport 'brace/theme/xcode';\n\n//IMPORT SEMANTIC UI\nimport {Button, Icon, Grid} from \"semantic-ui-react\";\n\n//IMPORT JS\nimport {updateValue, returnCode, userInput, uploadCode} from \"../assets/js/popOutText\";\n\n// const _SERVER = \"http://0.0.0.0:5000\";\nconst _SERVER = \"https://rc-cola-backend.herokuapp.com\"\n\n// https://stackoverflow.com/questions/4456336/finding-variable-type-in-javascript\nvar isArray = function (obj) {\n  switch (typeof(obj)) {\n    case 'object':\n      if (obj instanceof Array)\n        return true;\n      if (obj instanceof String)\n        return false;\n      return false;\n    default:\n      return false;\n  }\n};\n\nclass textEditor extends Component {\n  constructor(props) {\n    super(props)\n    uploadCode(this.props.group)\n    console.log(this.props.init)\n    updateValue(this.props.init)\n  }\n\n  state = {\n    output: \"\",\n    running: false,\n    ticket: \"\"\n  }\n\n  handleChange = (code) =>{\n    updateValue(code);\n  }\n  //will handle submission of code written\n  handleRun = () => {\n    this.setState({running: true})\n    const code = {\n        code: returnCode(),\n        input: userInput(returnCode()),\n        group: this.props.group\n    }\n    // console.log(code.input);\n    axios.post(_SERVER + \"/run\", {code})\n    .then(res =>{\n        this.setState({ticket: res.data})\n        // UPDATES WHAT WILL BE DISPLAY ON CONSOLE\n        axios.get(_SERVER + \"/output\", {\n          params: {\n            ticket: this.state.ticket\n          }\n        })\n        .then(res => {\n            const output = res.data;\n            // console.log(res.data)\n            if (isArray(res.data)) {\n              this.props.setData(res.data)\n            }\n            this.setState({output: output, running: false});\n        })\n      })\n  }\n\n  handleKill = () =>{\n      axios.get(_SERVER + \"/kill\", {\n        params: {\n          ticket: this.state.ticket\n        }\n      })\n      .then(res => {\n          console.log(res.data);\n      })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className = \"leftSide\">\n          <AceEditor\n            className = \"editor\"\n            fontSize = {18}\n            value = {returnCode()}\n            mode=\"python\"\n            theme=\"xcode\"\n            onChange={this.handleChange}\n            name=\"UNIQUE_ID_OF_DIV\"\n            editorProps={{$blockScrolling: true}}\n          />\n          <div className = \"buttonRun\">\n            <Grid columns= \"equal\">\n              <Grid.Column width = {8}>\n                {!this.state.running ?\n                  <Button id = \"playButton\" className = \"runPlay\" onClick = {() => this.handleRun()}>\n                    <Button.Content hidden>\n                        <Icon name='play' />\n                    </Button.Content>\n                  </Button>\n                  :\n                  <Button id=\"playButton\" className=\"runPlay\" loading>\n                    <Button.Content hidden>\n                      <Icon name='play'/>\n                    </Button.Content>\n                  </Button>\n                }\n              </Grid.Column>\n              <Grid.Column width = {8}>\n                  <Button id = \"playButton\" className = \"runPause\" onClick = {() => this.handleKill()}>\n                      <Button.Content hidden>\n                        <Icon name='pause' />\n                      </Button.Content>\n                  </Button>\n              </Grid.Column>\n            </Grid>\n          </div>\n          <div className=\"console\" type=\"text\" name=\"comment\">\n            {isArray(this.state.output) ?\n              <pre>{JSON.stringify(this.state.output)}</pre> :\n              <pre>{this.state.output}</pre>\n            }\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default textEditor;\n","import React, { Component } from 'react';\nimport {Container, Header} from \"semantic-ui-react\";\nimport Plot from 'react-plotly.js';\n\nclass Problem extends Component {\n  render() {\n    return (\n      <Container text>\n        <Header as='h2'>RC Cola Contest!</Header>\n        <p>\n          RC Cola is having a promotional contest in order to make a\n          comeback in the soda industry! They label numbers on the bottom\n          of each soda cap from <b>1-6</b>, so that you ALWAYS have an equal\n          chance of getting a bottle with any number on it. <b>If you happen\n          to get a bottle with the number '1' on it, you win the prize</b>!\n        </p>\n        <p>\n          This is a prize you NEED: Guaranteed admission to your dream\n          college, all the skins in Fortnite, your chance to meet any\n          celebrity.. you name it! You've completely lost your mind and\n          <b> you won't stop buying sodas until you've bought a soda with a\n          '1' on the cap</b>. You go up to an infinite RC Cola machine and do\n          just that: you buy sodas until you open one with your prize.\n        </p>\n        <p>\n          Now suppose 10,000 people line up behind me because they also\n          want this prize. Every one is awiting in this line so that they\n          can do the exact same thing: Buy a soda, check the cap to see if\n          it's a 1--no? Buy a soda, check the cap to see if it's a 1-- no?\n          Buy a soda, check the cap to see if it's a 1--yes! Let's say\n          everyone got so excited, they shouted out the number of bottles\n          they had to buy to get their win, before leaving to go home.\n        </p>\n        <p>\n          Researcher Helen Zhao Chen is curious to see which number was\n          most likely to be shouted. She stands next to the RC Cola\n          machine with a clipboard and <b>makes a list</b> of the numbers that\n          people are shouting. Every time somebody shouts a number, she\n          <b> appends it to her list</b>.\n        </p>\n        <p>\n          Print out this list that Helen has on her clipboard. You will see a\n          histogram (how many times each number was shouted out) below. If you\n          used any print statements to help you code, please comment them out.\n        </p>\n        <center>\n          <Plot\n            data={[\n              {\n                x: this.props.data,\n                type: 'histogram',\n              }\n            ]}\n            layout={{\n              width: 600,\n              height: 400,\n              title: \"How many Tries until Prize?\",\n              xaxis: {title: \"Number of Tries\"},\n              yaxis: {title: \"Number of People\"}\n            }}\n          />\n        </center>\n      </Container>\n    )\n  }\n};\n\nexport default Problem;\n","import React, { Component } from 'react';\nimport {Grid, Message, Form, Input, Label, Button} from \"semantic-ui-react\";\n\nclass Problem extends Component {\n  constructor(props) {\n    super(props)\n    this.handleSecond = this.handleSecond.bind(this);\n    this.handleFirst = this.handleFirst.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  state = {\n    student_1: \"\",\n    student_2: \"\"\n  }\n\n  handleFirst(e) {\n    this.setState({student_1: e.target.value})\n  }\n\n  handleSecond(e) {\n    this.setState({student_2: e.target.value})\n  }\n\n  handleClick() {\n    this.props.setStudents(this.state.student_1, this.state.student_2)\n  }\n\n  render() {\n    return (\n      <Grid padded centered>\n        <Grid.Row>\n          <Grid.Column width={5}>\n            <center>\n              <h2>Login!</h2>\n            </center>\n              <Message>\n                <Form>\n                  <Form.Field>\n                    <Label>Student 1</Label>\n                    <Input placeholder='Student Name..'\n                      value={this.state.student_1} onChange={this.handleFirst}/>\n                  </Form.Field>\n                  <Form.Field>\n                    <Label>Student 2</Label>\n                    <Input placeholder='Student Name..'\n                      value={this.state.student_2} onChange={this.handleSecond}/>\n                  </Form.Field>\n                  <center>\n                    <Button type='submit' primary onClick={this.handleClick}>\n                      Submit\n                    </Button>\n                  </center>\n                </Form>\n              </Message>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    )\n  }\n};\n\nexport default Problem;\n","import React, { Component } from 'react';\n\n//IMPORT COMPONENTS\nimport TextEditor from \"./components/textEditor\";\nimport Problem from \"./components/problem.jsx\";\nimport Login from \"./components/login.jsx\";\n\n//IMPORT SEMANTIC UI\nimport {Grid} from \"semantic-ui-react\";\nimport axios from \"axios\";\n\n//IMPORT CSS\nimport \"./assets/css/textEditor.css\";\n\n// const _SERVER = \"http://0.0.0.0:5000\";\nconst _SERVER = \"https://rc-cola-backend.herokuapp.com\"\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.handleGetData = this.handleGetData.bind(this);\n    this.handleLogin = this.handleLogin.bind(this);\n  }\n\n  state = {\n    data: [],\n    group_id: null,\n    init: \"\"\n  }\n\n  handleGetData = (arr) => {\n    this.setState({data: arr})\n  }\n\n  async handleLogin(st_1, st_2) {\n    await axios.post(_SERVER + \"/login\", {st_1, st_2})\n      .then(res => {\n        console.log(res)\n        this.setState({group_id: res.data.group_id, init: res.data.code})\n      })\n  }\n\n  render() {\n    console.log(this.state)\n    return (\n      <div>\n        {this.state.group_id ?\n          <React.Fragment>\n            <Grid columns= \"equal\" padded>\n              <Grid.Column width = {8}>\n                <TextEditor setData={this.handleGetData}\n                   group={this.state.group_id}\n                   init={this.state.init}\n                 />\n              </Grid.Column>\n              <Grid.Column width = {8}>\n                <Problem data={this.state.data}/>\n              </Grid.Column>\n            </Grid>\n          </React.Fragment>\n          :\n          <Login setStudents={this.handleLogin}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}